################################################################################
#
# RevBayes Example: Inferring a Phylogeny of Fossil Bears Using the Mk Model
#                   with the stationary frequencies being drawn from a hyperprior.
#
# This file: Runs the full MCMC ...
#
# authors:  April M. Wright, Michael J. Landis, Sebastian HÃ¶hna
#
################################################################################

#######################
# Reading in the Data #
#######################
# Import the morphological character matrix #
# this file contains only the taxa for which morphological characters are available #
morpho <- readDiscreteCharacterData("Data/bears.nex")

## helpers
taxa <- morpho.names()
num_taxa <- taxa.size()
num_branches <- 2 * num_taxa - 2

# Create some vector for the moves and monitors of this analysis
moves    = VectorMoves()
monitors = VectorMonitors()


##############
# Tree model #
##############

# Set up branch length hyperprior with a move
br_len_lambda ~ dnExp(0.2)
moves.append( mvScale(br_len_lambda, weight=2) )

# Define the tree parameter.
# First, we generate the topology.
# We assume a uniform prior on topology.
phylogeny ~ dnUniformTopologyBranchLength(taxa, branchLengthDistribution=dnExponential(br_len_lambda))

# compute the tree length from the phylogeny
tree_length := phylogeny.treeLength()

moves.append( mvNNI(phylogeny, weight=num_branches/2.0) )
moves.append( mvSPR(phylogeny, weight=num_branches/10.0) )
moves.append( mvBranchLengthScale(phylogeny, weight=num_branches) )



###########################################
# Binary morphological substitution model #
###########################################

# Specify the number of categories we would like to use to describe our data. For simplicity,
# we will use 2, which generates in total 4 rate matrices because every matrix has its opposites.
num_cats = 2

dir_alpha ~ dnExponential(1)
moves.append( mvScale(dir_alpha, lambda=1, weight=4.0 ) )

# Create a vector of how many different state frequencies we will need. We are working with
# binary data and will only need two. If you were working with multistate data, you could
# repeat the dir_alpha value for as many states as you need.

pi_prior := v(dir_alpha,dir_alpha)

# Loop over the categories. For each category, draw state frequencies from a Dirichlet. Use
# those state values to initialize the Q matrix.

for (i in 1:num_cats) {
	pi[i] ~ dnDirichlet(pi_prior)
	freq_zero[i] := pi[i][1]
	freq_one[i]  := pi[i][2]
  moves.append( mvBetaSimplex(pi[i], alpha=10, weight=4.0) )

  # now also set up the opposite rate matrix
	pi[num_cats+i] := simplex(freq_one[i] , freq_zero[i])

  Q_morpho[i] := fnF81(pi[i])
  Q_morpho[num_cats+i] := fnF81(pi[num_cats+i])
}

# Tell the model what the probability of a character going into any particular category.
matrix_probs <- simplex( rep(1,2*num_cats) )


# We also use a discretized gamma distribution of rate categories #
# again, the shape parameter is drawn from an lognormal prior #
alpha_morpho ~ dnUniform( 0.0, 1E6 )
rates_morpho := fnDiscretizeGamma( alpha_morpho, alpha_morpho, 4 )

# Moves on the parameters to the Gamma distribution.
moves.append( mvScale(alpha_morpho, lambda=1, weight=2.0) )

# Combine all of our elements into a CTMC. Because we have not observed any invariant sites,
# we specify the coding is 'variable'. Note that we are now feeding the site matrices to the CTMC.

phyMorpho ~ dnPhyloCTMC(tree=phylogeny, siteRates=rates_morpho, Q=Q_morpho, type="Standard", coding="variable", siteMatrices=matrix_probs)
phyMorpho.clamp(morpho)





########
# MCMC #
########

# initialize the model object #
mymodel = model(phylogeny)
# Create a vector of monitors #
# 1. for the full model #
monitors.append( mnModel(filename="output/mkv_hyperprior.log", printgen=10) )
# 2. the tree #
monitors.append( mnFile(filename="output/mkv_hyperprior.trees", printgen=10, phylogeny) )
# 3. and a few select parameters to be printed to the screen #
monitors.append( mnScreen(printgen=100, freq_zero) )

# Initialize the MCMC object #
mymcmc = mcmc(mymodel, monitors, moves, nruns=2, combine="mixed")

# Run the MCMC #
mymcmc.run(generations=10000, tuningInterval=200)

# check the performance of the MCMC/moves
mymcmc.operatorSummary()

# Read in the tree trace and construct the consensus tree tree #
trace = readTreeTrace("output/mkv_hyperprior.trees", treetype="non-clock")
trace.setBurnin(0.25)

# Summarize tree trace and the consensus tree to file
mapTree(trace, file="output/mkv_hyperprior.map.tre")
consensusTree(trace, file="output/mkv_hyperprior.majrule.tre")

# Quit RevBayes #
q()
