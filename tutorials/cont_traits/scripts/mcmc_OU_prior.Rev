################################################################################
#
# RevBayes Example: Simulating the prior of rates of evolution under a
#                   Ornstein-Uhlenbeck model
#
#
# authors: Michael R. May and Sebastian Höhna
#
################################################################################

#######################
# Reading in the Data #
#######################

### Select the trait to analyze
# Datasets: Female Mass, Tail Length – Body Length Residuals, Body Length – Mass Residuals, Maximum Age, Sexual Dimorphism, Geographic Range Size, Latitudinal Midpoint, Distance to Continental Centroid, Population Density, Home Range Size, Group Size, Gestation Duration, Litter size
trait <- 1

### Read in the trees
T <- readTrees("data/primates_tree.nex")[1]

### Read in the character data
data <- readContinuousCharacterData("data/primates_cont_traits.nex")
data.excludeAll()
data.includeCharacter( trait )

# Create some vector for the moves and monitors of this analysis
moves    = VectorMoves()
monitors = VectorMonitors()


##########################
# Specify the tree model #
##########################

tree <- T

##########################
# Specify the rate model #
##########################

root_age := tree.rootAge()

sigma2 ~ dnLoguniform(1e-3, 1)
moves.append( mvScale(sigma2, weight=2.0) )

alpha ~ dnExponential( abs(root_age / 2.0 / ln(2.0)) )
moves.append( mvScale(alpha, weight=2.0) )

theta ~ dnUniform(-10, 10)
moves.append( mvSlide(theta, weight=2.0) )

# also add an adaptive mutlivariate normal move
avmvn_move = mvAVMVN(weight=5, waitBeforeLearning=500, waitBeforeUsing=1000)
avmvn_move.addVariable(sigma2)
avmvn_move.addVariable(alpha)
avmvn_move.addVariable(theta)
moves.append( avmvn_move )

# some useful variable transformations to monitor
t_half := ln(2) / alpha
p_th := 1 - (1 - exp(-2.0*alpha*root_age)) / (2.0*alpha*root_age)


##########################
# Specify the BM process #
##########################

X ~ dnPhyloOrnsteinUhlenbeckREML(tree, alpha, theta, sigma2^0.5, rootStates=theta)
X.clamp(data)





#############
# The Model #
#############

mymodel = model(tree)
mymodel.ignoreAllData()        # Sample from the prior

### set up the monitors that will output parameter values to file and screen
monitors.append( mnModel(filename="output/simple_OU_prior.log", printgen=10) )
monitors.append( mnScreen(printgen=1000, sigma2, alpha, theta) )



################
# The Analysis #
################

### workspace mcmc ###
mymcmc = mcmc(mymodel, monitors, moves, nruns=2, combine="mixed")

### run the MCMC ###
mymcmc.run(generations=50000, tuningInterval=100)

## quit ##
q()
