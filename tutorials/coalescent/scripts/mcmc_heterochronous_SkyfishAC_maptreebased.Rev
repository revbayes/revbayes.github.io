################################################################################################
#
# RevBayes Example: Coalescent Skyfish model applied to heterochronous horse tree data
#
# authors: Sebastian Hoehna, Ronja Billenstein
#
################################################################################################

## Global settings

NUM_REPLICATES      = 2
NUM_MCMC_ITERATIONS = 10000
THINNING            = 10

# create the monitor and moves vectors
moves     = VectorMoves()
monitors  = VectorMonitors()

#######################
# Reading in the Data #
#######################

# Read in the tree sample and create a MAP (maximum a posteriori) tree
trees = readTreeTrace("output/horses_het_Constant.trees", treetype = "clock", burnin = 0.1)
maptree = mapTree(trace=trees, conditionalAges=TRUE)
taxa <- maptree.taxa()

# Get the number of taxa. We need it later on.
n_taxa <- taxa.size()

##############
# Tree model #
##############

MAX_AGE = maptree.rootAge()
print("max age: ", MAX_AGE)

H = 0.587405
EXPECTED_POP_SIZE = MAX_AGE/2

ac_sigma ~ dnExponential( 0.25 * MAX_AGE / 2 )
ac_sigma.setValue( 1.0 / MAX_AGE )
moves.append( mvScale(ac_sigma, weight=2) )

# we create the events drawn from the multi-value event eventDistribution
# as a prior on the number of events, we use a Poisson distribution with a mean of 10
# we have two valueDistribution
# - the population sizes with prior Lognormal( ln(EXPECTED_POP_SIZE), sd=2*H )
# - the change times with prior Uniform(0.0,MAX_AGE)
# we also assume that there is at least on population size but no change time
events ~ dnAutocorrelatedEvent(eventDistribution = dnPoisson(lambda=10),
                               valueDistribution =[dnUniform(0.0,MAX_AGE),
                                                   dnLognormal( ln(EXPECTED_POP_SIZE), sd=2*H )],
                               names=["time","theta"],
                               minNumberEvents=[0,1],
                               autocorrelationTypes=["NONE","ACLN"],
                               autocorrelationDependencies=["none","time"],
                               autocorrelationSigmas=[0,ac_sigma],
                               sort = "time")

# apply a move that adds and removes pairs of theta+time
moves.append( mvMultiValueEventBirthDeath(events, weight=50) )
# add a move that changes the theta variables
moves.append( mvMultiValueEventScale(events, name="theta", lambda=1.0, weight=10, tune=!FALSE) )
moves.append( mvMultiValueEventSlide(events, name="theta", lambda=1.0, weight=10, tune=!FALSE) )
# add a move that changes the time variables
moves.append( mvMultiValueEventSlide(events, name="time", lambda=10.0, weight=10, tune=!FALSE) )
moves.append( mvMultiValueEventScale(events, name="time", lambda=0.5, weight=10, tune=!FALSE) )

n_events := events.getNumberOfEvents()
population_size := events.getRealPosValues(name="theta")
changePoints := events.getRealPosValues(name="time")


### the time tree is a stochastic node modeled by the coalescent skyline process (dnCoalescentSkyline)
psi ~ dnCoalescentSkyline(theta=population_size, times=changePoints, method="specified", taxa=taxa)
psi.clamp(maptree)

interval_times := changePoints

#############
# The Model #
#############


### workspace model wrapper ###
mymodel = model(psi)



################
# The Analysis #
################

#add monitors
monitors.append( mnModel(filename="output/horses_het_SkyfishAC_maptreebased.log",printgen=THINNING) )
monitors.append( mnFile(filename="output/horses_het_SkyfishAC_maptreebased_nevents.log",n_events,printgen=THINNING) )
monitors.append( mnFile(filename="output/horses_het_SkyfishAC_maptreebased_NEs.log",population_size,printgen=THINNING) )
monitors.append( mnFile(filename="output/horses_het_SkyfishAC_maptreebased_times.log",interval_times,printgen=THINNING) )
monitors.append( mnScreen(n_events, printgen=100) )

mymcmc = mcmc(mymodel, monitors, moves, nruns=NUM_REPLICATES, combine="mixed")
mymcmc.burnin(NUM_MCMC_ITERATIONS*0.1,100)
mymcmc.run(NUM_MCMC_ITERATIONS, tuning = 100)

mymcmc.operatorSummary()

################

# you may want to quit RevBayes now
q()
