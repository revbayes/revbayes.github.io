####################################################################################################
#
# RevBayes Example: Coalescent process with CPP prior applied to heterochronous horse sequence data
#
# authors: Sebastian Hoehna, Ronja Billenstein
#
####################################################################################################

## Global settings

NUM_REPLICATES      = 2
NUM_MCMC_ITERATIONS = 10000
THINNING            = 10

# create the monitor and moves vectors
moves     = VectorMoves()
monitors  = VectorMonitors()

#######################
# Reading in the Data #
#######################

# Read in sequence data
taxa <- readTaxonData("data/horses_heterochronous_ages.tsv")
sequences <- readDiscreteCharacterData("data/horses_heterochronous_sequences.fasta")

# Get the number of taxa. We need it later on.
n_taxa <- taxa.size()

##############
# Tree model #
##############

MAX_AGE = 1.2E6

# we create the events drawn from the multi-value event eventDistribution
# as a prior on the number of events, we use a Poisson distribution with a mean of 10
# we have two valueDistribution
# - the population sizes with prior Uniform(1E4,1E8)
# - the change times with prior Uniform(0.0,MAX_AGE)
# we also assume that there is at least on population size but no change time
events ~ dnMultiValueEvent (eventDistribution = dnPoisson(lambda=10),
                   valueDistribution=[dnUniform(1E4,1E8),
                                      dnUniform(0.0,MAX_AGE)],
                   names=["theta","time"],
                   minNumberEvents=[1,0])

# apply a move that adds and removes pairs of theta+time
moves.append( mvMultiValueEventBirthDeath(events, weight=50) )
# add a move that changes the theta variables
moves.append( mvMultiValueEventScale(events, name="theta", lambda=1.0, weight=10, tune=!FALSE) )
# add a move that changes the time variables
moves.append( mvMultiValueEventSlide(events, name="time", lambda=10.0, weight=10, tune=!FALSE) )
moves.append( mvMultiValueEventScale(events, name="time", lambda=0.5, weight=10, tune=!FALSE) )

n_events := events.getNumberOfEvents()
population_size := events.getRealPosValues(name="theta")
changePoints := events.getRealPosValues(name="time")


### the time tree is a stochastic node modeled by the coalescent skyline process (dnCoalescentSkyline)
psi ~ dnCoalescentSkyline(theta=population_size, times=changePoints, method="specified", taxa=taxa)

trees = readTreeTrace("output/horses_het_constant.trees", treetype = "clock", burnin = 0.1)
maptree = mapTree(trace=trees)
psi.setValue( maptree )

root_age := psi.rootAge()

diff <- (1200000 - 780000)/2.0
# obs_root_age ~ dnNormal(mean = root_age, sd = 200000, min = 780000, max = 1200000)
obs_root_age ~ dnNormal(mean = root_age, sd = 200000, min = root_age - diff, max = root_age + diff)
obs_root_age.clamp(850000)

interval_times := changePoints

### add some moves that change the tree
moves.append( mvNarrow(psi, weight=n_taxa) )
moves.append( mvNNI(psi, weight=n_taxa) )
moves.append( mvFNPR(psi, weight=n_taxa/4.0) )
moves.append( mvSubtreeScale(psi, weight=n_taxa/5.0) )
moves.append( mvNodeTimeSlideUniform(psi, weight=n_taxa) )
moves.append( mvRootTimeScaleBactrian(psi, weight=n_taxa/5.0) )
moves.append( mvTreeScale(psi, weight=n_taxa/5.0) )

#############
# Sequences #
#############

er_prior <- v(1,1,1,1,1,1)
pi_prior <- v(1,1,1,1)
er ~ dnDirichlet(er_prior)
pi ~ dnDirichlet(pi_prior)

moves.append( mvBetaSimplex(er, weight=3) )
moves.append( mvDirichletSimplex(er, weight=1) )
moves.append( mvBetaSimplex(pi, weight=2) )
moves.append( mvDirichletSimplex(pi, weight=1) )

Q := fnGTR(er,pi)

alpha ~ dnUniform( 0.0, 1E6 )
alpha.setValue( 1.0 )
sr := fnDiscretizeGamma( alpha, alpha, 4 )
moves.append( mvScale(alpha, weight=2.0) )

p_inv ~ dnBeta(1,1)
moves.append( mvSlide(p_inv) )

clock ~ dnLoguniform(1e-12,1e-4)
clock.setValue(4.68e-8)
moves.append( mvScale(clock, weight=2.0) )

up_down_move = mvUpDownScale(weight=5.0)
up_down_move.addVariable(clock,up=TRUE)
up_down_move.addVariable(psi,up=FALSE)
moves.append( up_down_move )

seq ~ dnPhyloCTMC(tree=psi, Q=Q, siteRates=sr, pInv=p_inv, type="DNA", branchRates=clock)
seq.clamp(sequences)

#############
# The Model #
#############


### workspace model wrapper ###
mymodel = model(psi)



################
# The Analysis #
################

#add monitors
monitors.append( mnModel(filename="output/horses_het_CPP.log",printgen=THINNING) )
monitors.append( mnFile(filename="output/horses_het_CPP_nevents.log",n_events,printgen=THINNING) )
monitors.append( mnFile(filename="output/horses_het_CPP.trees",psi,printgen=THINNING) )
monitors.append( mnFile(filename="output/horses_het_CPP_NEs.log",population_size,printgen=THINNING) )
monitors.append( mnFile(filename="output/horses_het_CPP_times.log",interval_times,printgen=THINNING) )
monitors.append( mnScreen(n_events, root_age, printgen=100) )

mymcmc = mcmc(mymodel, monitors, moves, nruns=NUM_REPLICATES, combine="mixed")
mymcmc.burnin(NUM_MCMC_ITERATIONS*0.1,100)
mymcmc.run(NUM_MCMC_ITERATIONS, tuning = 100)

mymcmc.operatorSummary()

################

# you may want to quit RevBayes now
q()
