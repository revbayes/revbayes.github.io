################################################################################
#
# RevBayes Example: Bayesian inference of phylogeny using a GTR+Gamma+Inv
#                   substitution model for a codon specific substitution models
#
# authors: Michael Landis, Sebastian Hoehna, Tracy A. Heath and Brian R. Moore
#
################################################################################



#######################
# Reading in the Data #
#######################

# read in the character data
data_cox2 <- readDiscreteCharacterData("data/primates_and_galeopterus_cox2.nex")
data_cytb <- readDiscreteCharacterData("data/primates_and_galeopterus_cytb.nex")


# partition for 1st and 2nd codon position
data[1] <- data_cox2
data[1].setCodonPartition( v(1,2) )

# partition for 3rd codon position
data[2] <- data_cox2
data[2].setCodonPartition( 3 )


# partition for 1st and 2nd codon position
data[3] <- data_cytb
data[3].setCodonPartition( v(1,2) )

# partition for 3rd codon position
data[4] <- data_cytb
data[4].setCodonPartition( 3 )

n_data_subsets <- data.size()


# Get some useful variables from the data. We need these later on.
n_taxa <- data[1].ntaxa()
n_branches <- 2 * n_taxa - 3
taxa <- data[1].taxa()

for (i in 1:n_data_subsets) {
    num_sites[i] = data[i].nchar()
}


# Create some vector for the moves and monitors of this analysis
moves    = VectorMoves()
monitors = VectorMonitors()


##################################
#      Substitution Model        #
#   Loop over each data subset   #
##################################
  
for (i in 1:n_data_subsets) {

    # exchangeability rates for partition i
    er_prior[i] <- v(1,1,1,1,1,1)
    er[i] ~ dnDirichlet(er_prior[i])
    moves.append( mvSimplexElementScale(er[i], alpha=10, tune=true, weight=3) ) 

    # stationary frequencies for partition i
    pi_prior[i] <- v(1,1,1,1)
    pi[i] ~ dnDirichlet(pi_prior[i])
    moves.append( mvSimplexElementScale(pi[i], alpha=10, tune=true, weight=2) )

    # rate matrix for partition i
    Q[i] := fnGTR(er[i],pi[i]) 
  
    # +Gamma for partition i
    alpha[i] ~ dnUniform(0,1E8)
    gamma_rates[i] := fnDiscretizeGamma( alpha[i], alpha[i], 4, false )

    # add moves for the alpha parameter
    moves.append( mvScale(alpha[i],weight=2) )

    # the probability of a site being invariable
    pinvar[i] ~ dnBeta(1,1)
    moves.append( mvBetaProbability(pinvar[i], delta=10, tune=true, weight=2.0) )

}


##############
# Tree model #
##############

out_group = clade("Galeopterus_variegatus")
# Prior distribution on the tree topology
topology ~ dnUniformTopology(taxa, outgroup=out_group)
moves.append( mvNNI(topology, weight=n_taxa/2.0) )
moves.append( mvSPR(topology, weight=n_taxa/10.0) )

# Branch length prior
for (i in 1:n_branches) {
    bl[i] ~ dnExponential(10.0)
    moves.append( mvScale(bl[i]) )
}

TL := sum(bl)

psi := treeAssembly(topology, bl)


##############################
# Partition rate multipliers #
##############################

# specify a rate multiplier for each partition
part_rate_mult ~ dnDirichlet( rep(10.0, n_data_subsets) )
moves.append( mvBetaSimplex(part_rate_mult, alpha=1.0, tune=true, weight=n_data_subsets) )
moves.append( mvDirichletSimplex(part_rate_mult, alpha=1.0, tune=true, weight=2.0) )

# Note that here we are dividing two vectors element-wise, i.e., 
# each element of part_rate_mult gets divided by the corresponding
# element of num_sites. Then we multiply the result by sum(num_sites),
# which is just a scalar. This operation ensures that the mean of
# partition-specific branch lengths, weighted by the number of sites
# in each partition, stays equal to the branch lengths we are 
# actually sampling.

part_rate := part_rate_mult / num_sites * sum(num_sites)


###################
# PhyloCTMC Model #
###################

for (i in 1:n_data_subsets) {
    phyloSeq[i] ~ dnPhyloCTMC(tree=psi, Q=Q[i], branchRates=part_rate[i], siteRates=gamma_rates[i], pInv=pinvar[i], type="DNA")
    phyloSeq[i].clamp(data[i])
}


############
# Analysis #
############

mymodel = model(psi)

# add monitors
monitors.append( mnModel(filename="output/PS_codon.log",printgen=10) )
monitors.append( mnFile(psi, filename="output/PS_codon.trees", printgen=100) )
monitors.append( mnScreen(TL, printgen=1000) )

# run the analysis
mymcmc = mcmc(mymodel, moves, monitors, nruns=2, combine="mixed")
mymcmc.run(30000,tuningInterval=200)

# summarize output
treetrace = readTreeTrace("output/PS_codon.trees", treetype="non-clock")
#treetrace.summarize()

map_tree = mapTree(treetrace,"output/PS_codon_map.tre")


# you may want to quit RevBayes now
q()
