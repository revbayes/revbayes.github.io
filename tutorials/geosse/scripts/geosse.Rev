# load TensorPhylo plugin
loadPlugin("TensorPhylo")

# FILESYSTEM
fp          = "./"
dat_fp      = fp + "data/"
out_fp      = fp + "output/"
bg_fn       = dat_fp + "kadua_range_n2.nex"
phy_fn      = dat_fp + "kadua.tre"
lbl_fn      = dat_fp + "kadua_range_label.txt"

# PHYLOGENETIC DATA
phy         <- readTrees(phy_fn)[1]
tree_height <- phy.rootAge()
taxa        = phy.taxa()
num_taxa    = taxa.size()

# BIOGEOGRAPHIC DATA
bg_01       = readDiscreteCharacterData(bg_fn)

# To see where each lineage is, we can do:     #
bg_01.show()
# Note how the biogeographic ranges are shown  #
# as bit (present/absent in a region) patterns #

num_regions = bg_01.nchar()
num_ranges  = abs(2^num_regions - 1)
num_pairs   = num_regions^2 - num_regions
bg_dat      = formatDiscreteCharacterData(bg_01, format="GeoSSE", numStates=num_ranges)

# MODEL RATES

## WITHIN-REGION SPECIATION
rho_w ~ dnExp(1)  # base rate

# We want to generate region-specific within-region #
# speciation rates                                  #
#                                                   #
# First we produce fractions (that add up to 1.0),  #
# one per region.                                   #

m_w_simplex ~ dnDirichlet(rep(1, num_regions))

# Then we multiply each fraction by the number of   #
# regions. The outcome are numbers, one per region, #
# that can be used to scale the base rate. This     #
# procedure is just a fancy trick to keep these     #
# scalers between 0 and num_regions                 #

m_w := m_w_simplex * num_regions
r_w := rho_w * m_w

## EXTINCTION
rho_e ~ dnExp(1)
m_e_simplex ~ dnDirichlet(rep(1,num_regions))
m_e := m_e_simplex * num_regions
r_e := rho_e * m_e

for (i in 1:num_ranges) {
    mu[i] <- 0.0

    if (i <= num_regions) {
        mu[i] := r_e[i]
    }
}

## BETWEEN-REGION SPECIATION
rho_b ~ dnExp(1)
m_b_simplex ~ dnDirichlet(rep(1, num_pairs/2))  # (num_pairs is created at the top!)
m_b_idx = 1

for (i in 1:num_regions) {
    m_b[i][i] <- 0.0

    for (j in 1:num_regions) {
        if (i < j) {
            m_b[i][j] := abs(m_b_simplex[m_b_idx] * num_pairs)
            m_b[j][i] := abs(m_b_simplex[m_b_idx] * num_pairs)
            m_b_idx += 1
        }

        r_b[i][j] := rho_b * m_b[i][j]
    }
}

## DISPERSAL
rho_d ~ dnExp(1)
m_d_simplex ~ dnDirichlet(rep(1,num_pairs))
m_d_idx = 1

for (i in 1:num_regions) {
    m_d[i][i] <- 0.0

    for (j in 1:num_regions) {
        if (i != j) {
            m_d[i][j] := abs(m_d_simplex[m_d_idx++] * num_pairs)
        }

        r_d[i][j] := rho_d * m_d[i][j]
    }
}

## ANAGENETIC RATE MATRIX
Q_bg := fnBiogeographyRateMatrix(
    dispersalRates=r_d,
    extirpationRates=r_e,
    maxRangeSize=num_regions
)

# We have 3 states, 'A', 'B', and 'AB', that should have #
# both a numerical and a bit-pattern representations     #
#
# We can check it by doing:                              #

Q_bg.getStateDescriptions()[1] # for state 1, '10' -> 'A'
Q_bg.getStateDescriptions()[2] # for state 2, '01' -> 'B'
Q_bg.getStateDescriptions()[3] # for state 3, '11' -> 'AB'

## CLADOGENETIC RATE MATRIX
clado_map := fnBiogeographyCladoEventsBD(
    speciation_rates=[rho_w,rho_b],
    within_region_features=m_w,
    between_region_features=m_b,
    max_range_size=num_regions,
    max_subrange_split_size=num_regions
)

lambda := clado_map.getSpeciationRateSumPerState()
omega := clado_map.getCladogeneticProbabilityMatrix()

# Sanity check: let us look at the within-region         #
# speciation rates inside 'clado_map' and compare them   #
# to the scaled rates we created above                   #

# within-A speciation rate
clado_map.getRate(0,0,0) == r_w[1] # should be TRUE
r_w[1] == lambda[1] # should be TRUE

# within-B speciation rate
clado_map.getRate(1,1,1) == r_w[2] # should be TRUE
r_w[2] == lambda[2] # should be TRUE

## PI (equilibrium or stationary frequencies)
pi_base <- rep(1,num_ranges)
pi <- simplex(pi_base)

# TREE
timetree ~ dnGLHBDSP(
    rootAge     = tree_height,
    lambda      = lambda,
    mu          = mu,
    eta         = Q_bg,
    omega       = omega,
    pi          = pi,
    rho         = 1,
    condition   = "time",
    taxa        = taxa,
    nStates     = num_ranges,
    nProc       = 4
)
timetree.clamp(phy)
timetree.clampCharData(bg_dat)

# MCMC SETUP
n_gen = 1000
n_burn = n_gen/10
printgen = 10

# MCMC MOVES
mvi = 1
mv[mvi++] = mvScale(rho_w, weight=1)
mv[mvi++] = mvScale(rho_e, weight=1)
mv[mvi++] = mvScale(rho_b, weight=1)
mv[mvi++] = mvScale(rho_d, weight=1)
mv[mvi++] = mvSimplex(m_e_simplex, weight=m_e.size())
mv[mvi++] = mvSimplex(m_w_simplex, weight=m_w.size())
mv[mvi++] = mvSimplex(m_b_simplex, weight=m_b_simplex.size())
mv[mvi++] = mvSimplex(m_d_simplex, weight=m_d_simplex.size())

# MCMC MONITORS
mni = 1
mn[mni++] = mnScreen(printgen=printgen)
mn[mni++] = mnModel(printgen=printgen, filename=out_fp + "model.txt")
mn[mni++] = mnJointConditionalAncestralState(glhbdsp=timetree, tree=timetree,
                                             printgen=printgen, withTips=true, withStartStates=true,
                                             type="NaturalNumbers", filename=out_fp + "states.txt")
mn[mni++] = mnStochasticCharacterMap(glhbdsp=timetree, printgen=printgen, filename=out_fp + "stoch.txt")

# STATE LABELS
write("index,range\n", file=lbl_fn)
state_labels = Q_bg.getStateDescriptions()
for (i in 1:state_labels.size()) {
    write( (i-1), ",", state_labels[i], "\n", file=lbl_fn, append=true, separator="")
}

# MCMC START
mdl = model(m_w)
ch = mcmc(mv, mn, mdl)
ch.burnin(n_burn, tuningInterval=10)
ch.run(n_gen)

# ANCESTRAL STATES
f_burn = 0.2
x_stoch = readAncestralStateTrace(file=out_fp + "stoch.txt")
x_states = readAncestralStateTrace(file=out_fp + "states.txt")
summarizeCharacterMaps(x_stoch,timetree,file=out_fp + "events.tsv",burnin=f_burn)
state_tree = ancestralStateTree(tree=timetree,
                   ancestral_state_trace_vector=x_states,
                   include_start_states=true,
                   file=out_fp + "ase.tre",
                   summary_statistic="MAP",
                   reconstruction="marginal",
                   burnin=f_burn,
                   nStates=3,
                   site=1)
writeNexus(state_tree,filename=out_fp + "ase.tre")

print("DONE")
q()
