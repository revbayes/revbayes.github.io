loadPlugin("TensorPhylo", "/tensorphylo/build/installer/lib")

seed(1)

# FILESYSTEM
fp         = "../"
dat_fp     = fp + "data/"
out_fp     = fp + "output/"
mol_fn     = dat_fp + "silversword.mol.nex"
bg_fn      = dat_fp + "silversword.range.nex"
phy_fn     = dat_fp + "silversword.mcc.tre"
feature_fn = dat_fp + "feature_summary.csv"
age_fn     = dat_fp + "age_summary.csv"

# PHYLOGENETIC DATA
phy          <- readTrees(phy_fn)[1]
tree_height  <- phy.rootAge()
taxa         = phy.taxa()
num_taxa     = taxa.size()
num_branches = 2 * num_taxa - 2

# MOLECULAR DATA
dat_mol   = readDiscreteCharacterData(mol_fn)
num_sites = dat_mol.nchar()

# BIOGEOGRAPHIC DATA

## TIME SLICES
times_dat   = readDataDelimitedFile(age_fn, delimiter=",", header=true)
num_times   = times_dat.size() + 1
for (i in 1:(num_times-1)) times[i] <- times_dat[i][2]

## REGION DATA
bg_01       = readDiscreteCharacterData(bg_fn)
num_regions = bg_01.nchar()
num_ranges  = abs(2^num_regions - 1)
num_pairs   = num_regions^2 - num_regions
bg_dat      = formatDiscreteCharacterData(bg_01, format="GeoSSE", numStates=num_ranges)

## GETTING FEATURE DATA
geo_features <- readRegionalFeatures(feature_fn, delimiter=",",nonexistent_region_token="nan")

## TRANSFORMING FEATURE DATA
geo_features.normalize("within")
geo_features.normalize("between")
for (i in 1:num_times) {
    feature_CW[i] <- geo_features.get("within","categorical",i)
    feature_QW[i] <- geo_features.get("within","quantitative",i)
    feature_CB[i] <- geo_features.get("between","categorical",i)
    feature_QB[i] <- geo_features.get("between","quantitative",i)
    for (j in 1:feature_CW[i].size()) {layer_CW[i][j] <- feature_CW[i][j].get()}
    for (j in 1:feature_QW[i].size()) {layer_QW[i][j] <- feature_QW[i][j].get()}
    for (j in 1:feature_CB[i].size()) {layer_CB[i][j] <- feature_CB[i][j].get()}
    for (j in 1:feature_QB[i].size()) {layer_QB[i][j] <- feature_QB[i][j].get()}}

# MODEL RATES

## MODEL PARAMETER DISTRIBUTIONS
sigma_dist  = dnNormal(0,1)
phi_dist    = dnNormal(0,1)
rho_dist    = dnExp(1)

## WITHIN-REGION speciation_rates
rho_w ~ rho_dist
for (i in 1:feature_CW[1].size()) sigma_w[i] ~ sigma_dist
for (i in 1:feature_QW[1].size()) phi_w[i] ~ phi_dist
for (i in 1:num_times) m_w[i] := fnFeatureInformedRates(layer_CW[i], layer_QW[i], sigma_w, phi_w, null_rate=0)

## EXTINCTION
rho_e ~ rho_dist
for (i in 1:feature_CW[1].size()) sigma_e[i] ~ sigma_dist
for (i in 1:feature_QW[1].size()) phi_e[i] ~ phi_dist
for (i in 1:num_times) m_e[i] := fnFeatureInformedRates(layer_CW[i], layer_QW[i], sigma_e, phi_e, null_rate=1e3)
for (i in 1:num_times) r_e[i] := rho_e * m_e[i][1]
for (i in 1:num_times) {
    for (j in 1:num_ranges) {
        mu[i][j] <- abs(0)
        if (j <= num_regions) mu[i][j] := r_e[i][j]}}

## BETWEEN-REGION SPECIATION RATES
rho_b ~ rho_dist
for (i in 1:feature_CB[1].size()) sigma_b[i] ~ sigma_dist
for (i in 1:feature_QB[1].size()) phi_b[i] ~ phi_dist
for (i in 1:num_times) m_b[i] := fnFeatureInformedRates(layer_CB[i], layer_QB[i], sigma_b, phi_b, null_rate=1)

## DISPERSAL
rho_d ~ rho_dist
for (i in 1:feature_CB[1].size()) sigma_d[i] ~ sigma_dist
for (i in 1:feature_QB[1].size()) phi_d[i] ~ phi_dist
for (i in 1:num_times) m_d[i] := fnFeatureInformedRates(layer_CB[i], layer_QB[i], sigma_d, phi_d, null_rate=0)
for (i in 1:num_times) {
    for (j in 1:num_regions) {r_d[i][j] := rho_d * m_d[i][j]}}

## ANAGENETIC EVENTS
for (i in 1:num_times) {
    Q_bg[i] := fnBiogeographyRateMatrix(
        dispersalRates=r_d[i],
        extirpationRates=r_e[i],
        maxRangeSize=num_regions)}

## CLADOGENETIC EVENTS
for (i in 1:num_times) {
    clado_map[i] := fnBiogeographyCladoEventsBD(
        speciation_rates=[ rho_w, rho_b ],
        within_region_features=m_w[i][1],
        between_region_features=m_b[i],
        max_range_size=num_regions,
        max_subrange_split_size=num_regions)
    lambda[i] := clado_map[i].getSpeciationRateSumPerState()
    omega[i]  := clado_map[i].getCladogeneticProbabilityMatrix()}

## PI
pi_bg_prior <- rep(1,num_ranges)
pi_bg       <- simplex(pi_bg_prior)

# TREE
root_age ~ dnUniform(tree_height-10, tree_height+10)
timetree ~ dnGLHBDSP(
    rootAge     = tree_height,
    lambda      = lambda,
    mu          = mu,
    eta         = Q_bg,
    omega       = omega,
    lambdaTimes = times,
    muTimes     = times,
    etaTimes    = times,
    omegaTimes  = times,
    pi          = pi_bg,
    rho         = 1,
    condition   = "time",
    taxa        = taxa,
    nStates     = num_ranges,
    nProc       = 4)
timetree.clampCharData(bg_dat)

# MOLECULAR MODEL

## PARAMETERS
mu_mol_base ~ dnExp(10)
mu_mol_branch_rel ~ dnDirichlet(rep(2, num_branches))
mu_mol := mu_mol_base * mu_mol_branch_rel
kappa ~ dnGamma(2,2)
pi_mol ~ dnDirichlet( [1,1,1,1] )
Q_mol := fnHKY(kappa=kappa, baseFrequencies=pi_mol)
alpha ~ dnExp(0.1)
site_rates := fnDiscretizeGamma(shape=alpha, rate=alpha, numCats=4, median=true)

## MOLECULAR MODEL OBJECT
x_mol ~ dnPhyloCTMC(
    Q=Q_mol,
    tree=timetree,
    branchRates=mu_mol,
    siteRates=site_rates,
    rootFrequencies=pi_mol,
    nSites=num_sites,
    type="DNA" )

# INITIALIZING PARAMETERS
rho_w.setValue(0.1)
rho_e.setValue(0.1)
rho_b.setValue(0.1)
rho_d.setValue(0.1)
for (i in 1:sigma_w.size()) sigma_w[i].setValue(0.01)
for (i in 1:sigma_e.size()) sigma_e[i].setValue(0.01)
for (i in 1:sigma_b.size()) sigma_b[i].setValue(0.01)
for (i in 1:sigma_d.size()) sigma_d[i].setValue(0.01)
for (i in 1:phi_w.size()) phi_w[i].setValue(0.01)
for (i in 1:phi_e.size()) phi_e[i].setValue(0.01)
for (i in 1:phi_b.size()) phi_b[i].setValue(0.01)
for (i in 1:phi_d.size()) phi_d[i].setValue(0.01)
timetree.setValue(phy)
root_age.setValue(tree_height)

# MCMC SETUP
n_gen    = 1000
n_burn   = n_gen/10
printgen = 10

# MCMC MOVES
mvi = 1

## MOLECULAR MOVES
mv[mvi++] = mvScale(mu_mol_base, weight=5)
mv[mvi++] = mvSimplex(mu_mol_branch_rel, numCats=1, alpha=3, kappa=1, weight=num_branches)
mv[mvi++] = mvSimplex(mu_mol_branch_rel, numCats=5, alpha=3, kappa=1, weight=num_branches)
mv[mvi++] = mvScale(kappa)
mv[mvi++] = mvScale(alpha)
mv[mvi++] = mvSimplex(pi_mol, alpha=3)

## BASE RATES
mv[mvi++] = mvScale(rho_w)
mv[mvi++] = mvScale(rho_e)
mv[mvi++] = mvScale(rho_b)
mv[mvi++] = mvScale(rho_d)

## FEATURE EFFECT PARAMETERS
for (i in 1:sigma_d.size()) {mv[mvi++] = mvSlide(sigma_d[i])}
for (i in 1:sigma_b.size()) {mv[mvi++] = mvSlide(sigma_b[i])}
for (i in 1:sigma_e.size()) {mv[mvi++] = mvSlide(sigma_e[i])}
for (i in 1:sigma_w.size()) {mv[mvi++] = mvSlide(sigma_w[i])}
for (i in 1:phi_d.size()) {mv[mvi++] = mvSlide(phi_d[i])}
for (i in 1:phi_b.size()) {mv[mvi++] = mvSlide(phi_b[i])}
for (i in 1:phi_e.size()) {mv[mvi++] = mvSlide(phi_e[i])}
for (i in 1:phi_w.size()) {mv[mvi++] = mvSlide(phi_w[i])}

## TREE MOVES
mv[mvi++] = mvScale(root_age, weight=5)
mv[mvi++] = mvNodeTimeSlideUniform(timetree, weight=5)

# MCMC MONITORS
mni = 1
mn[mni++] = mnScreen(printgen=1)
mn[mni++] = mnModel(printgen=printgen, filename=out_fp+"model.log")
mn[mni++] = mnJointConditionalAncestralState(glhbdsp=timetree, tree=timetree, printgen=printgen, filename=out_fp+"states.log", withTips=true, withStartStates=true, type="NaturalNumbers")
mn[mni++] = mnStochasticCharacterMap(glhbdsp=timetree, printgen=printgen, filename=out_fp+"stoch.log")
mn[mni++] = mnFile(timetree, printgen=printgen, filename=out_fp+"trace.tre")

# MCMC START
mdl = model(m_w)
ch = mcmc(mv, mn, mdl)
ch.burnin(n_burn, tuningInterval=10)
ch.run(n_gen)

# ANCESTRAL STATES

## READING TRACES
tree_trace = readTreeTrace(file=out_fp+"trace.tre", treetype="clock", burnin=0.1)
mcc_tree = mccTree(tree_trace, file=out_fp+"mcc.tre")
state_trace = readAncestralStateTrace(file=out_fp+"states.log")
state_tree_trace = readAncestralStateTreeTrace(file=out_fp+"trace.tre", treetype="clock")

## CONSTRUCTING ANCESTRAL STATE TREE
state_tree = ancestralStateTree(tree=mcc_tree,
                                tree_trace=state_tree_trace,
                                ancestral_state_trace_vector=state_trace,
                                include_start_states=true,
                                file=out_fp+"ase.tre",
                                summary_statistic="MAP",
                                burnin=0.1)

## STOCHASTIC MAPPING
stoch = readAncestralStateTrace(file=out_fp+"stoch.log")
summarizeCharacterMaps(stoch,mcc_tree,file=out_fp+"events.tsv",burnin=0.1)

print("DONE")
q()