################################################################################
#
# RevBayes Example: Bayesian inference of phylogeny using a Jukes-Cantor
#            substitution model on a single gene.
#
# authors: Sebastian Hoehna, Michael Landis, and Tracy A. Heath
#
################################################################################

###
# code for asides in the ctmc tutorial

### 
# define variables that need to be defined (copied from mcmc_JC.Rev)

# Read in sequence data for both genes
data = readDiscreteCharacterData("data/primates_and_galeopterus_cytb.nex")

# Get some useful variables from the data. We need these later on.
num_taxa <- data.ntaxa()
num_branches <- 2 * num_taxa - 3
taxa <- data.taxa()

moves    = VectorMoves()
monitors = VectorMonitors()

###
# Alternative tree priors

# branch lengths rate (1/mean)
br_len_lambda <- 10.0

# topology + branch lengths distribution
psi ~ dnUniformTopologyBranchLength(taxa, branchLengthDistribution=dnExponential(br_len_lambda))

# moves on the topology + branch lengths
moves.append( mvNNI(psi, weight=num_taxa) )
moves.append( mvSPR(psi, weight=num_taxa/10.0) )
moves.append( mvBranchLengthScale(psi, weight=num_branches) )

###
# Alternative branch-length priors

# prior distribution on tree length
TL ~ dnGamma(2,4)
moves.append( mvScale(TL) )

# prior on relative branch lengths
rel_branch_lengths ~ dnDirichlet( rep(1.0,num_branches) )
moves.append( mvBetaSimplex(rel_branch_lengths, weight=num_branches) )
moves.append( mvDirichletSimplex(rel_branch_lengths, weight=num_branches/10.0) )

# make branch lengths
br_lens := rel_branch_lengths * TL

###
# Alternative prior on time-trees

# age of the tree
root_age <- 10.0

# uniform timetree prior
psi ~ dnUniformTimeTree(rootAge=root_age, taxa=taxa)

# moves on the tree
moves.append( mvNarrow(psi, weight=num_taxa) )
moves.append( mvNNI(psi, weight=num_taxa/5.0) )
moves.append( mvFNPR(psi, weight=num_taxa/5.0) )
moves.append( mvGPR(psi, weight=num_taxa/30.0) )
moves.append( mvSubtreeScale(psi, weight=num_taxa/3.0) )
moves.append( mvNodeTimeSlideUniform(psi, weight=num_taxa) )

# clock rate prior
log_clock_rate ~ dnUniform(-6,1)

# move on clock rate
moves.append( mvSlide(log_clock_rate, weight=2.0) )

# clock rate
clock_rate := 10^log_clock_rate

###
# Setting up the Kimura 1980 (K80 or K2p) substitution model

# create kappa and move
kappa ~ dnExp(1)
moves.append( mvScale(kappa, weight=1.0) )

# define Q
Q := fnK80(kappa)

# set up ctmc so this doesn't error
topology ~ dnUniformTopology(taxa)
psi := fnTreeAssembly(topology, br_lens)
seq ~ dnPhyloCTMC(tree = psi, Q = Q, branchRates = clock_rate, siteRates = br_lens, type = "DNA")
data <- readDiscreteCharacterData("data/primates_and_galeopterus_cytb.nex")
seq.clamp(data) 
# this is not meant to be a functioning CTMC, just to make this script run for testing

###
# Saving and restarting analyses

# make model object
mymodel = model(psi)

# make mcmc object
mymcmc = mcmc(mymodel, monitors, moves)

# run MCMC with checkpointing 
mymcmc.run(generations=100000000, checkpointInterval=100, checkpointFile="output/primates_cytb_JC.state")

# restart from checkpointing
mymcmc.initializeFromCheckpoint("output/primates_cytb_JC.state")

# run MCMC again!
mymcmc.run(generations=100000000, checkpointInterval=100, checkpointFile="output/primates_cytb_JC.state")

# quit revbayes
q()
